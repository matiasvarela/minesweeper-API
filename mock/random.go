// Code generated by MockGen. DO NOT EDIT.
// Source: random.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRandom is a mock of Random interface
type MockRandom struct {
	ctrl     *gomock.Controller
	recorder *MockRandomMockRecorder
}

// MockRandomMockRecorder is the mock recorder for MockRandom
type MockRandomMockRecorder struct {
	mock *MockRandom
}

// NewMockRandom creates a new mock instance
func NewMockRandom(ctrl *gomock.Controller) *MockRandom {
	mock := &MockRandom{ctrl: ctrl}
	mock.recorder = &MockRandomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRandom) EXPECT() *MockRandomMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockRandom) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockRandomMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRandom)(nil).Init))
}

// GenerateN mocks base method
func (m *MockRandom) GenerateN(n int) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateN", n)
	ret0, _ := ret[0].([]int)
	return ret0
}

// GenerateN indicates an expected call of GenerateN
func (mr *MockRandomMockRecorder) GenerateN(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateN", reflect.TypeOf((*MockRandom)(nil).GenerateN), n)
}

// GenerateID mocks base method
func (m *MockRandom) GenerateID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateID indicates an expected call of GenerateID
func (mr *MockRandomMockRecorder) GenerateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateID", reflect.TypeOf((*MockRandom)(nil).GenerateID))
}
